// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotificationMicroservice.DataAccess.NotificationMicroserviceDbContext;

namespace NotificationMicroservice.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210811183704_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NotificationMicroservice.Core.Model.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-123412341234"),
                            Type = "Post"
                        },
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-123412341235"),
                            Type = "Story"
                        });
                });

            modelBuilder.Entity("NotificationMicroservice.Core.Model.Follow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FollowedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FollowingUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FollowedByUserId");

                    b.HasIndex("FollowingUserId");

                    b.ToTable("Follows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-123412341234"),
                            FollowedByUserId = new Guid("44406823-9cf7-4bf6-8950-efbcd5bd2bdc"),
                            FollowingUserId = new Guid("4ddf3498-2204-4a40-b2d4-501c44307e46")
                        },
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-123412341235"),
                            FollowedByUserId = new Guid("4ddf3498-2204-4a40-b2d4-501c44307e46"),
                            FollowingUserId = new Guid("44406823-9cf7-4bf6-8950-efbcd5bd2bdc")
                        });
                });

            modelBuilder.Entity("NotificationMicroservice.Core.Model.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegisteredUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("RegisteredUserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-123412341234"),
                            ContentId = new Guid("12345678-1234-1234-1234-123412341234"),
                            RegisteredUserId = new Guid("44406823-9cf7-4bf6-8950-efbcd5bd2bdc"),
                            TimeStamp = new DateTime(2021, 8, 11, 20, 37, 4, 166, DateTimeKind.Local).AddTicks(1768)
                        },
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-123412341235"),
                            ContentId = new Guid("12345678-1234-1234-1234-123412341235"),
                            RegisteredUserId = new Guid("44406823-9cf7-4bf6-8950-efbcd5bd2bdc"),
                            TimeStamp = new DateTime(2021, 8, 11, 20, 37, 4, 169, DateTimeKind.Local).AddTicks(532)
                        });
                });

            modelBuilder.Entity("NotificationMicroservice.Core.Model.NotificationOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsNotifiedByComments")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotifiedByFollowRequests")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotifiedByMessages")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotifiedByPosts")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotifiedByStories")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LoggedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NotificationByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LoggedUserId");

                    b.HasIndex("NotificationByUserId");

                    b.ToTable("NotificationOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-123412341234"),
                            IsNotifiedByComments = true,
                            IsNotifiedByFollowRequests = false,
                            IsNotifiedByMessages = false,
                            IsNotifiedByPosts = true,
                            IsNotifiedByStories = true,
                            LoggedUserId = new Guid("4ddf3498-2204-4a40-b2d4-501c44307e46"),
                            NotificationByUserId = new Guid("44406823-9cf7-4bf6-8950-efbcd5bd2bdc")
                        });
                });

            modelBuilder.Entity("NotificationMicroservice.Core.Model.RegisteredUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RegisteredUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ddf3498-2204-4a40-b2d4-501c44307e46"),
                            ProfilePicturePath = "",
                            Username = "diplomski"
                        },
                        new
                        {
                            Id = new Guid("44406823-9cf7-4bf6-8950-efbcd5bd2bdc"),
                            ProfilePicturePath = "",
                            Username = "diplomskiv2"
                        });
                });

            modelBuilder.Entity("NotificationMicroservice.Core.Model.Follow", b =>
                {
                    b.HasOne("NotificationMicroservice.Core.Model.RegisteredUser", "FollowedByUser")
                        .WithMany()
                        .HasForeignKey("FollowedByUserId");

                    b.HasOne("NotificationMicroservice.Core.Model.RegisteredUser", "FollowingUser")
                        .WithMany()
                        .HasForeignKey("FollowingUserId");

                    b.Navigation("FollowedByUser");

                    b.Navigation("FollowingUser");
                });

            modelBuilder.Entity("NotificationMicroservice.Core.Model.Notification", b =>
                {
                    b.HasOne("NotificationMicroservice.Core.Model.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId");

                    b.HasOne("NotificationMicroservice.Core.Model.RegisteredUser", "RegisteredUser")
                        .WithMany()
                        .HasForeignKey("RegisteredUserId");

                    b.Navigation("Content");

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("NotificationMicroservice.Core.Model.NotificationOptions", b =>
                {
                    b.HasOne("NotificationMicroservice.Core.Model.RegisteredUser", "LoggedUser")
                        .WithMany()
                        .HasForeignKey("LoggedUserId");

                    b.HasOne("NotificationMicroservice.Core.Model.RegisteredUser", "NotificationByUser")
                        .WithMany()
                        .HasForeignKey("NotificationByUserId");

                    b.Navigation("LoggedUser");

                    b.Navigation("NotificationByUser");
                });
#pragma warning restore 612, 618
        }
    }
}
